{"version":3,"sources":["RoundModes.ts","PlayerRound.tsx","Round.tsx","Sheet.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["RoundModes","PlayerRound","cardCount","prevRoundScore","roundMode","player","recordBid","recordScore","trickPlayedAction","tricksPlayed","winning","startingPlayer","legendaryExpansionInPlay","useState","bid","setBid","tricks","setTricks","bonus","setBonus","trickNums","Array","keys","bet","setBet","placeRascalOfRoatanBet","betAmount","score","setScore","useEffect","Completed","cardsInRound","tricksBid","tricksWon","bonusPoints","betBonus","Math","abs","calculatePlayerScoreForRound","adjustBid","bidChange","max","min","backgroundColor","Bidding","className","style","width","key","title","map","n","type","name","id","value","onClick","newbid","htmlFor","Playing","alt","src","process","placeholder","step","onChange","event","Number","target","ReactGA","initialize","Round","players","prevRoundScores","currentRound","roundCompleteAction","winningPlayers","NotYet","setRoundMode","bids","setBids","bidsComplete","setBidsComplete","totalTricksBid","setTotalTricksBid","allBidsIn","totalOfBids","forEach","p","undefined","scores","setScores","recordPlayerScore","tricksPlayedCount","setTricksPlayedCount","addToTrickCount","krakenPlayed","setKrakenPlayed","includes","border","Sheet","deletePlayerAction","startGameAction","setCurrentRound","setWinningPlayers","nextRound","roundScores","startingPlayerNum","setStartingPlayerNum","highestScore","prevRound","push","playerNumber","playerpos","selectStartingPlayer","length","App","previousPlayersJson","localStorage","getItem","initialPlayers","JSON","parse","setPlayers","newPlayerName","setNewPlayerName","newPlayerFieldShown","setNewPlayerFieldShown","gameStarted","setGameStarted","setLegendaryExpansionInPlay","checked","e","setItem","String","stringify","filter","fontSize","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.859d0bee.chunk.js","sourcesContent":["enum RoundModes {\n    NotYet = 1,\n    Bidding = 2,\n    Playing = 3,\n    Completed = 4\n}\n\nexport default RoundModes;\n","import React, { FunctionComponent, useState, useEffect } from 'react';\nimport RoundModes from './RoundModes';\n\nimport './PlayerRound.css';\n\ninterface PlayerRoundProps {\n  cardCount: number;\n  prevRoundScore: number;\n  roundMode: RoundModes;\n  player: string;\n  recordBid: (player: string, bid: number) => void;\n  recordScore: (player: string, score: number) => void;\n  trickPlayedAction: () => void;\n  tricksPlayed: number;\n  winning: boolean;\n  startingPlayer: boolean;\n  legendaryExpansionInPlay: boolean;\n}\n\nconst calculatePlayerScoreForRound = (cardsInRound: number, tricksBid: number, tricksWon: number, bonusPoints: number, bet: number) => {\n  let betBonus: number = 0;\n  if (bet > 0) {\n    if (tricksBid === tricksWon) {\n      betBonus = bet;\n    } else {\n      betBonus = -bet;\n    }\n  }\n  if (tricksBid === 0) {\n    if (tricksWon === 0) {\n      return 10 * cardsInRound + betBonus;\n    }\n      return -10 * cardsInRound + betBonus;\n  }\n\n  if (tricksBid !== tricksWon) {\n    return -Math.abs(tricksBid - tricksWon) * 10 + betBonus;\n  }\n  return tricksWon * 20 + bonusPoints + betBonus;\n}\n\nconst PlayerRound: FunctionComponent<PlayerRoundProps> = ( {cardCount, prevRoundScore, roundMode, player,\n  recordBid, recordScore, trickPlayedAction, tricksPlayed, winning, startingPlayer, legendaryExpansionInPlay } ) => {\n  let [bid, setBid] = useState(0);\n  let [tricks, setTricks] = useState(0);\n  let [bonus, setBonus] = useState(0);\n  let trickNums = [...Array(cardCount + 1).keys()];\n\n  const recordPlayerBid = (newbid: number): void => {\n    setBid(newbid);\n    recordBid(player, newbid);\n  };\n\n  let [bet, setBet] = useState(0);\n  const placeRascalOfRoatanBet = (betAmount: number) => {\n    setBet(betAmount);\n  };\n\n  let [score, setScore] = useState(0);\n  useEffect(() => {\n    if (roundMode === RoundModes.Completed) {\n      let score = calculatePlayerScoreForRound(cardCount, bid, tricks, bonus, bet);\n      recordScore(player, score + prevRoundScore);\n      setScore(score);\n    }\n  }, [roundMode, bid, bonus, player, score, prevRoundScore, recordScore, cardCount, tricks, bet]);\n\n  const trickPlayed = (): void => {\n    setTricks(tricks + 1);\n    trickPlayedAction();\n  };\n\n  const bonusEntered = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    setBonus(Number(event.target.value));\n  };\n\n  const adjustBid = (bidChange: number): void => {\n    setBid(Math.max(0,Math.min(bid + bidChange, cardCount)));\n  };\n\n  let backgroundColor =  winning ? 'rgba(255,215,0,0.6)'\n    : ((startingPlayer && roundMode === RoundModes.Bidding) ? 'rgba(25,25,200,0.6)' : '');\n  return (\n    <td className='PlayerRound' style={{width: 160, backgroundColor: backgroundColor}} key={player+cardCount}>\n    {roundMode === RoundModes.Bidding && \n    <div title={startingPlayer ? 'Starts round' : ''}>\n      {trickNums.map(n => \n      <>\n        <input key={player + n} type='radio' name={player} id={player+n} value={n} onClick={() => {recordPlayerBid(n)}}/>\n        <label key={player + n + 'L'} htmlFor={player + n}>{n}</label>&nbsp;<br></br>\n        </>\n      )}\n    </div>}\n\n    { (roundMode === RoundModes.Completed || roundMode === RoundModes.Playing) &&\n        <>\n        <span>Bid: {bid} </span>\n        <span>Won: {tricks} </span>\n        { bet > 0 && <div>Bet: {bet}</div>}\n        { roundMode === RoundModes.Playing &&\n          <div>\n            { tricksPlayed < cardCount &&\n             <button onClick={() => {trickPlayed()}}>Add Trick</button>\n            }\n            { legendaryExpansionInPlay && tricks > 0 &&\n            <div className='dropdown'>\n              <button className='dropdownbutton'>\n                <img style={{backgroundColor: 'white'}} alt={'Pirate played'} width={16} src={process.env.PUBLIC_URL+'/Skull-And-Crossbones-Remix.svg'}/>\n              </button>\n              <div className='dropdown-content'>\n                <div>Use Harry the Giant</div>\n                <div className='dropdown-option' onClick={() => adjustBid(1)}>Raise bid by 1</div>\n                <div className='dropdown-option' onClick={() => adjustBid(-1)}>Lower bid by 1</div>\n                <div>Use Rascal of Roatan </div>\n                <div className='dropdown-option' onClick={() => placeRascalOfRoatanBet(10)}>Bet 10 points</div>\n                <div className='dropdown-option' onClick={() => placeRascalOfRoatanBet(20)}>Bet 20 points</div>\n             </div>\n            </div>\n            }\n          </div>\n        }\n        { roundMode === RoundModes.Playing && tricksPlayed === cardCount && bid === tricks && \n          <div>\n            <input placeholder='Bonus' type='number' style={{width: 48}} min='0' step='10' onChange={bonusEntered}/>\n          </div>\n        }\n    </>}\n    { roundMode === RoundModes.Completed &&\n    <>\n      { bonus > 0 && <div>Bonus: {bonus}</div>}\n    <div>Score: {score}</div>\n    <div>Total: {score + prevRoundScore}</div>\n    </>\n    }\n    </td>\n  );\n}\n\nexport default PlayerRound;\n","import React, { FunctionComponent, useState, useEffect } from 'react';\nimport PlayerRound from './PlayerRound';\nimport RoundModes from './RoundModes';\nimport NumberDictionary from './NumberDictionary';\nimport ReactGA from 'react-ga';\n//import './Round.css';\n\ninterface RoundProps {\n  cardCount: number;\n  players: string[];\n  prevRoundScores: NumberDictionary | null;\n  currentRound: number;\n  roundCompleteAction: (scores: NumberDictionary) => void;\n  winningPlayers: string[];\n  startingPlayer: string;\n  legendaryExpansionInPlay: boolean;\n}\n\nReactGA.initialize('UA-166808776-1');\n\nconst Round: FunctionComponent<RoundProps> = ( {cardCount, players, prevRoundScores,\n  currentRound, roundCompleteAction, winningPlayers, startingPlayer, legendaryExpansionInPlay } ) => {\n  const [roundMode, setRoundMode] = useState(currentRound < cardCount ?\n    RoundModes.NotYet : (currentRound === cardCount ? RoundModes.Bidding : RoundModes.Completed));\n\n  let roundComplete = () => {\n    setRoundMode(RoundModes.Completed);\n    roundCompleteAction(scores);\n  }\n  let startRound = () => {\n    setRoundMode(RoundModes.Playing);\n    if (currentRound === 1) {\n      ReactGA.event({\n        'action': 'game_started', \n        'category': 'game_activity',\n        'label': 'Players: ' + players,\n      });\n    }\n  }\n\n  let [bids,setBids] = useState({} as NumberDictionary);\n  let [bidsComplete, setBidsComplete] = useState(false);\n  let [totalTricksBid, setTotalTricksBid] = useState(0);\n  let recordBid = (player: string, bid: number) => {\n    bids[player] = bid;\n    setBids(bids);\n    let allBidsIn = true;\n    let totalOfBids = 0;\n    players.forEach(p => {\n      if (bids[p] === undefined) {\n        allBidsIn = false;\n      } else {\n        totalOfBids += bids[p];\n      }\n    });\n    setBidsComplete(allBidsIn);\n    setTotalTricksBid(totalOfBids);\n  }\n\n  let [scores, setScores] = useState({} as NumberDictionary);\n  let recordPlayerScore = (player: string, score: number) => {\n    scores[player] = score;\n    setScores(scores);\n  };\n\n  useEffect(() => {\n    setRoundMode(currentRound < cardCount ?\n      RoundModes.NotYet : (currentRound === cardCount ? RoundModes.Bidding : RoundModes.Completed));\n  }, [cardCount, currentRound]);\n\n  let [tricksPlayedCount, setTricksPlayedCount] = useState(0);\n  let addToTrickCount = () => {\n    setTricksPlayedCount(tricksPlayedCount + 1);\n  }\n\n  let [krakenPlayed, setKrakenPlayed] = useState(false);\n  let recordKrakenPlayed = () => {\n    setKrakenPlayed(true);\n    addToTrickCount();\n  }\n\n  return (\n    <tr className=\"Round\">\n       <td key='cardCount'>{cardCount}{!bidsComplete && currentRound === cardCount && <div>Enter bids</div>}</td>\n\n       {players.map(p => \n       <PlayerRound key={p+cardCount} cardCount={cardCount} trickPlayedAction={addToTrickCount} tricksPlayed={tricksPlayedCount}\n        prevRoundScore={prevRoundScores && prevRoundScores[p] ? prevRoundScores[p] : 0}\n        roundMode={roundMode} player={p} recordBid={recordBid} recordScore={recordPlayerScore}\n        winning={winningPlayers.includes(p) && cardCount === currentRound - 1} startingPlayer={startingPlayer === p}\n        legendaryExpansionInPlay={legendaryExpansionInPlay}\n        />\n       )}\n\n       <td style={{width: 50, border: 'none'}}>\n        { roundMode === RoundModes.Bidding && bidsComplete &&\n        <>\n        <button onClick={ () => {startRound()}}>Start Round</button>\n        <div style={{width: 100}}>\n        { totalTricksBid === cardCount ? 'Bids at par' :\n          (totalTricksBid < cardCount ? 'Bids ' + (cardCount - totalTricksBid) + ' under'\n          : 'Bids ' + (totalTricksBid - cardCount) + ' over')\n        }\n        </div>\n        </>\n        }\n        { roundMode === RoundModes.Playing && tricksPlayedCount < cardCount && !krakenPlayed && legendaryExpansionInPlay &&\n          <button onClick={() => { recordKrakenPlayed()}}>Kraken Played</button>\n        }\n\n        { roundMode === RoundModes.Playing && tricksPlayedCount === cardCount &&\n          <button onClick={() => { roundComplete()}}>Round done</button>\n        }\n       </td>\n    </tr>\n  );\n}\n\nexport default Round;\n","import React, { FunctionComponent, useState, useEffect } from 'react';\nimport Round from './Round';\nimport './Sheet.css';\nimport NumberDictionary from './NumberDictionary';\nimport ReactGA from 'react-ga';\n\ninterface SheetProps {\n  players: string[];\n  deletePlayerAction: (player: string) => void;\n  startGameAction: () => void;\n  legendaryExpansionInPlay: boolean;\n}\n\nReactGA.initialize('UA-166808776-1');\n\nconst Sheet: FunctionComponent<SheetProps> = ({players, deletePlayerAction, startGameAction, legendaryExpansionInPlay}) => {\n  let [currentRound, setCurrentRound] = useState(1);\n  let [scores, setScores] = useState([] as NumberDictionary[]);\n  let [winningPlayers, setWinningPlayers] = useState([] as string[]);\n\n  let nextRound = (roundScores: NumberDictionary) => {\n    if (currentRound === 1) {\n      startGameAction();\n    }\n    scores[currentRound] = roundScores;\n    setScores(scores);\n    if (currentRound === 10) {\n      ReactGA.event({\n        'action': 'game_completed', \n        'category': 'game_activity',\n        'label': 'Winners: ' + winningPlayers + ' Scores: ' + scores[currentRound],\n      });\n    } else {\n      setCurrentRound(currentRound+1);\n    }\n  }\n\n  let [startingPlayerNum, setStartingPlayerNum] = useState(0);\n  const selectStartingPlayer = (p: string): void => {\n    if (currentRound === 1) {\n      let playerNumber = 0;\n      let playerpos: NumberDictionary = {};\n      players.forEach(p => {\n        playerpos[p] = playerNumber++;\n      });\n      setStartingPlayerNum(playerpos[p]);\n    }\n  };\n\n  useEffect(() => {\n    let highestScore = 0;\n    if (currentRound > 1) {\n      let prevRound = currentRound - 1;\n      for (const player in scores[prevRound]) {\n        if (scores[prevRound][player] > highestScore) {\n          winningPlayers = [player];\n          highestScore = scores[prevRound][player];\n        } else if (scores[prevRound][player] === highestScore) {\n          winningPlayers.push(player);\n        }\n      }\n      setWinningPlayers(winningPlayers);\n    }\n  }, [scores, currentRound]);\n\n  return (\n    <>\n    <table>\n      <thead>\n        <tr>\n        <th>Round</th>\n        {\n          players.map(p => \n          <th key={p} title={currentRound === 1 ?'Click here to make this the starting player':''} onClick={() => selectStartingPlayer(p)}>{p}&nbsp; \n          { currentRound === 1 && <button onClick={() => {deletePlayerAction(p)}}>&#10007;</button>}\n          </th>)\n        }\n        </tr>\n      </thead>\n      <tbody>\n    { [1,2,3,4,5,6,7,8,9,10].map(n =>\n         <Round key={n} cardCount={n} players={players} prevRoundScores={n > 1 ? scores[n-1] : null}\n          currentRound={currentRound} roundCompleteAction={nextRound} winningPlayers={winningPlayers}\n          startingPlayer={players[(startingPlayerNum + n-1) % players.length]} legendaryExpansionInPlay={legendaryExpansionInPlay}/>\n      )\n    }\n    </tbody>\n    </table>\n    </>\n  );\n}\n\nexport default Sheet;\n","import React, { useState } from 'react';\nimport './App.css';\nimport Sheet from './Sheet';\n\nfunction App() {\n  let previousPlayersJson = localStorage.getItem('players');\n  let initialPlayers = ['Player 1', 'Player 2', 'Player 3'];\n  if (previousPlayersJson) {\n    initialPlayers = JSON.parse(previousPlayersJson);\n  }\n  let [players, setPlayers] = useState(initialPlayers);\n  let [newPlayerName, setNewPlayerName] = useState('');\n  let [newPlayerFieldShown, setNewPlayerFieldShown] = useState(false);\n  let [gameStarted, setGameStarted] = useState(false);\n  let [legendaryExpansionInPlay, setLegendaryExpansionInPlay] = useState(localStorage.getItem('legendaryExpansionInPlay') === 'true');\n\n  const newPlayerNameChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setNewPlayerName(event.target.value);\n  }\n\n  const addPlayer = () => {\n    players.push(newPlayerName);\n    setPlayers(players);\n    setNewPlayerFieldShown(false);\n    localStorage.setItem('players', JSON.stringify(players));\n  }\n  const deletePlayer = (player: string) => {\n    setPlayers(players.filter(p => p !== player));\n    localStorage.setItem('players', JSON.stringify(players.filter(p => p !== player)));\n  }\n  const legendaryExpansionInPlayChanged = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    setLegendaryExpansionInPlay(!legendaryExpansionInPlay);\n    localStorage.setItem('legendaryExpansionInPlay', String(!legendaryExpansionInPlay));\n  };\n  const startGame = () => {\n    setGameStarted(true);\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-body\">\n      <h1>Ye New Skull King Scoresheet</h1>\n        { !newPlayerFieldShown && !gameStarted &&\n          <div>\n            <input id='legendary_expansion_cb' type='checkbox' checked={legendaryExpansionInPlay}\n             onChange={legendaryExpansionInPlayChanged} title='Adds support for the Kraken and Harry the Giant cards'/>\n             <label htmlFor={'legendary_expansion_cb'}>Use Legendary Expansion</label>\n            <button onClick={() => {setNewPlayerFieldShown(true)}}>Add player</button>\n          </div>\n        }\n        { newPlayerFieldShown && <>\n          <input type='text' placeholder='name' onChange={newPlayerNameChanged}></input>\n          <button onClick={addPlayer}>OK</button>\n          </>\n        }\n        <Sheet players={players} deletePlayerAction={deletePlayer} startGameAction={startGame} legendaryExpansionInPlay={legendaryExpansionInPlay}></Sheet>\n        <br/>\n        <div style={{fontSize: 11}}>\n        © 2020 Craig Fisher <a href=\"https://twitter.com/craigfis\" target='_blank' rel=\"noopener noreferrer\">@craigfis</a><br/>\n        <a href=\"https://github.com/Craigfis/SkullKingScorer\" target='_blank' rel=\"noopener noreferrer\">https://github.com/Craigfis/SkullKingScorer</a>\n        <br/>\n        <a href=\"https://www.grandpabecksgames.com/products-skull-king\" target='_blank' rel=\"noopener noreferrer\">What is Skull King?</a>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}