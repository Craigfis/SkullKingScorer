{"version":3,"sources":["RoundModes.ts","PlayerRound.tsx","Round.tsx","Sheet.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["RoundModes","PlayerRound","cardCount","prevRoundScore","roundMode","player","recordBid","recordScore","trickPlayedAction","tricksPlayed","useState","bids","setBids","tricks","setTricks","bonus","setBonus","trickNums","Array","keys","score","setScore","useEffect","Completed","cardsInRound","tricksWon","bonusPoints","tricksBid","Math","abs","className","style","width","key","Bidding","map","n","type","name","id","value","onClick","bid","htmlFor","Playing","placeholder","onChange","event","Number","target","Round","players","prevRoundScores","currentRound","roundCompleteAction","NotYet","setRoundMode","bidsComplete","setBidsComplete","totalTricksBid","setTotalTricksBid","allBidsIn","totalOfBids","forEach","p","undefined","scores","setScores","recordPlayerScore","tricksPlayedCount","setTricksPlayedCount","addToTrickCount","krakenPlayed","setKrakenPlayed","border","Sheet","deletePlayerAction","startGameAction","setCurrentRound","nextRound","roundScores","App","setPlayers","newPlayerName","setNewPlayerName","newPlayerFieldShown","setNewPlayerFieldShown","gameStarted","setGameStarted","push","filter","fontSize","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c345ae65.chunk.js","sourcesContent":["enum RoundModes {\n    NotYet = 1,\n    Bidding = 2,\n    Playing = 3,\n    Completed = 4\n}\n\nexport default RoundModes;\n","import React, { FunctionComponent, useState, useEffect } from 'react';\nimport RoundModes from './RoundModes';\n//import './PlayerRound.css';\n\ninterface PlayerRoundProps {\n  cardCount: number;\n  prevRoundScore: number;\n  roundMode: RoundModes;\n  player: string;\n  recordBid: (player: string, bid: number) => void;\n  recordScore: (player: string, score: number) => void;\n  trickPlayedAction: () => void;\n  tricksPlayed: number;\n}\n\nlet calculatePlayerScoreForRound = (cardsInRound: number, tricksBid: number, tricksWon: number, bonusPoints: number) => {\n  if (tricksBid === 0 && tricksWon === 0) {\n    return 10 * cardsInRound;\n  }\n  if (tricksBid !== tricksWon) {\n    return -Math.abs(tricksBid - tricksWon) * 10;\n  }\n  return tricksWon * 20 + bonusPoints;\n}\nconst PlayerRound: FunctionComponent<PlayerRoundProps> = ( {cardCount, prevRoundScore, roundMode, player, recordBid,\n  recordScore, trickPlayedAction, tricksPlayed } ) => {\n  let [bids, setBids] = useState(0);\n  let [tricks, setTricks] = useState(0);\n  let [bonus, setBonus] = useState(0);\n  let trickNums = [...Array(cardCount + 1).keys()];\n\n  let recordPlayerBid = (bid: number) => {\n    setBids(bid);\n    recordBid(player, bid);\n  }\n\n  let [score, setScore] = useState(0);\n  useEffect(() => {\n    if (roundMode === RoundModes.Completed) {\n      let score = calculatePlayerScoreForRound(cardCount, bids, tricks, bonus);\n      recordScore(player, score + prevRoundScore);\n      setScore(score);\n    }\n  }, [roundMode, bids, bonus, player, score, prevRoundScore, recordScore, cardCount, tricks])\n\n  let trickPlayed = () => {\n    setTricks(tricks + 1);\n    trickPlayedAction();\n  }\n\n  let bonusEntered = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setBonus(Number(event.target.value));\n  }\n\n  return (\n    <td className='PlayerRound' style={{width: 160}} key={player}>\n    {roundMode === RoundModes.Bidding && \n    <div>\n      {trickNums.map(n => \n      <>&nbsp;\n        <input key={player + n} type='radio' name={player} id={player+n} value={n} onClick={() => {recordPlayerBid(n)}}/>\n        <label key={player + n + 'L'} htmlFor={player + n}>{n}</label>&nbsp;<br></br>\n        </>\n      )}\n    </div>}\n    { (roundMode === RoundModes.Completed || roundMode === RoundModes.Playing) &&\n        <>\n        <span>Bid: {bids} </span>\n        <span>Won: {tricks} </span>\n        { roundMode === RoundModes.Playing && tricksPlayed < cardCount &&\n        <div><button onClick={() => {trickPlayed()}}>Add Trick</button></div>}\n        { roundMode === RoundModes.Playing && tricksPlayed === cardCount &&\n        <div>\n        <input placeholder='Bonus' type='number' style={{width: 44}} onChange={bonusEntered}/></div>}\n    </>}\n    { roundMode === RoundModes.Completed &&\n    <>\n      { bonus > 0 && <div>Bonus: {bonus}</div>}\n    <div>score: {score}</div>\n    <div>Total: {score + prevRoundScore}</div>\n    </>\n    }\n    </td>\n  );\n}\n\nexport default PlayerRound;\n","import React, { FunctionComponent, useState, useEffect } from 'react';\nimport PlayerRound from './PlayerRound';\nimport RoundModes from './RoundModes';\nimport NumberDictionary from './NumberDictionary';\n//import './Round.css';\n\ninterface RoundProps {\n  cardCount: number;\n  players: string[];\n  prevRoundScores: NumberDictionary | null;\n  currentRound: number;\n  roundCompleteAction: (scores: NumberDictionary) => void;\n}\n\nconst Round: FunctionComponent<RoundProps> = ( {cardCount, players, prevRoundScores,\n  currentRound, roundCompleteAction } ) => {\n  const [roundMode, setRoundMode] = useState(currentRound < cardCount ?\n    RoundModes.NotYet : (currentRound === cardCount ? RoundModes.Bidding : RoundModes.Completed));\n\n  let roundComplete = () => {\n    setRoundMode(RoundModes.Completed);\n    roundCompleteAction(scores);\n  }\n  let startRound = () => {\n    setRoundMode(RoundModes.Playing);\n  }\n\n  let [bids,setBids] = useState({} as NumberDictionary);\n  let [bidsComplete, setBidsComplete] = useState(false);\n  let [totalTricksBid, setTotalTricksBid] = useState(0);\n  let recordBid = (player: string, bid: number) => {\n    bids[player] = bid;\n    setBids(bids);\n    let allBidsIn = true;\n    let totalOfBids = 0;\n    players.forEach(p => {\n      if (bids[p] === undefined) {\n        allBidsIn = false;\n      } else {\n        totalOfBids += bids[p];\n      }\n    });\n    setBidsComplete(allBidsIn);\n    setTotalTricksBid(totalOfBids);\n  }\n\n  let [scores, setScores] = useState({} as NumberDictionary);\n  let recordPlayerScore = (player: string, score: number) => {\n    scores[player] = score;\n    setScores(scores);\n  };\n\n  useEffect(() => {\n    setRoundMode(currentRound < cardCount ?\n      RoundModes.NotYet : (currentRound === cardCount ? RoundModes.Bidding : RoundModes.Completed));\n  }, [cardCount, currentRound]);\n\n  let [tricksPlayedCount, setTricksPlayedCount] = useState(0);\n  let addToTrickCount = () => {\n    setTricksPlayedCount(tricksPlayedCount + 1);\n  }\n\n  let [krakenPlayed, setKrakenPlayed] = useState(false);\n  let recordKrakenPlayed = () => {\n    setKrakenPlayed(true);\n    addToTrickCount();\n  }\n\n  return (\n    <tr className=\"Round\">\n       <td key='cardCount'>{cardCount}{!bidsComplete && currentRound === cardCount && <div>Enter bids</div>}</td>\n       {players.map(p => \n       <PlayerRound key={p} cardCount={cardCount} trickPlayedAction={addToTrickCount} tricksPlayed={tricksPlayedCount}\n        prevRoundScore={prevRoundScores && prevRoundScores[p] ? prevRoundScores[p] : 0}\n        roundMode={roundMode} player={p} recordBid={recordBid} recordScore={recordPlayerScore}></PlayerRound>\n       )}\n       <td style={{width: 50, border: 'none'}}>\n        { roundMode === RoundModes.Bidding && bidsComplete &&\n        <>\n        <button onClick={ () => {startRound()}}>Start Round</button>\n        <div style={{width: 100}}>\n        { totalTricksBid === cardCount ? 'Bids at par' :\n          (totalTricksBid < cardCount ? 'Bids ' + (cardCount - totalTricksBid) + ' under'\n          : 'Bids ' + (totalTricksBid - cardCount) + ' over')\n        }\n        </div>\n        </>\n        }\n        { roundMode === RoundModes.Playing && tricksPlayedCount < cardCount && !krakenPlayed &&\n        <button onClick={() => { recordKrakenPlayed()}}>Kraken Played</button>}\n\n        { roundMode === RoundModes.Playing && tricksPlayedCount === cardCount &&\n        <button onClick={() => { roundComplete()}}>Round done</button>}\n       </td>\n    </tr>\n  );\n}\n\nexport default Round;\n","import React, { FunctionComponent, useState } from 'react';\nimport Round from './Round';\nimport './Sheet.css';\nimport NumberDictionary from './NumberDictionary';\n\n\ninterface SheetProps {\n  players: string[];\n  deletePlayerAction: (player: string) => void;\n  startGameAction: () => void;\n}\n\nconst Sheet: FunctionComponent<SheetProps> = ({players, deletePlayerAction, startGameAction}) => {\n  let [currentRound, setCurrentRound] = useState(1);\n  let [scores, setScores] = useState([] as NumberDictionary[]);\n\n  let nextRound = (roundScores: NumberDictionary) => {\n    if (currentRound === 1) {\n      startGameAction();\n    }\n    scores[currentRound] = roundScores;\n    setScores(scores);\n    setCurrentRound(currentRound+1);\n  }\n  \n  return (\n    <>\n    <table>\n      <thead>\n        <tr>\n        <th>Round</th>\n        {\n          players.map(p => \n          <th key={p}>{p} \n          { currentRound === 1 && <button onClick={() => {deletePlayerAction(p)}}>\t&#10007;</button>}\n          </th>)\n        }\n        </tr>\n      </thead>\n      <tbody>\n    { [1,2,3,4,5,6,7,8,9,10].map(n =>\n         <Round key={n} cardCount={n} players={players} prevRoundScores={n > 1 ? scores[n-1] : null}\n          currentRound={currentRound} roundCompleteAction={nextRound}/>\n      )\n    }\n    </tbody>\n    </table>\n    </>\n  );\n}\n\nexport default Sheet;\n","import React, { useState } from 'react';\nimport './App.css';\nimport Sheet from './Sheet';\n\nfunction App() {\n  let [players, setPlayers] = useState(['Player 1', 'Player 2', 'Player 3']);\n  let [newPlayerName, setNewPlayerName] = useState('');\n  let [newPlayerFieldShown, setNewPlayerFieldShown] = useState(false);\n  let [gameStarted, setGameStarted] = useState(false);\n\n  let newPlayerNameChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setNewPlayerName(event.target.value);\n  }\n\n  let addPlayer = () => {\n    players.push(newPlayerName);\n    setPlayers(players);\n    setNewPlayerFieldShown(false);\n  }\n  let deletePlayer = (player: string) => {\n    setPlayers(players.filter(p => p !== player));\n  }\n  let startGame = () => {\n    setGameStarted(true);\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-body\">\n      <h1>Skull King Scoresheet</h1>\n        { !newPlayerFieldShown && !gameStarted &&\n        <button onClick={() => {setNewPlayerFieldShown(true)}}>Add player</button>}\n        { newPlayerFieldShown && <>\n          <input type='text' placeholder='name' onChange={newPlayerNameChanged}></input>\n          <button onClick={addPlayer}>OK</button>\n          </>}\n        <Sheet players={players} deletePlayerAction={deletePlayer} startGameAction={startGame}></Sheet>\n        <br/>\n        <div style={{fontSize: 11}}>\n        Copyright (c) 2020 Craig Fisher <br/>\n        <a href=\"https://github.com/Craigfis/SkullKingScorer\">https://github.com/Craigfis/SkullKingScorer</a>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}