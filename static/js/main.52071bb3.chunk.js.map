{"version":3,"sources":["RoundModes.ts","PlayerRound.tsx","Round.tsx","Sheet.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["RoundModes","PlayerRound","cardCount","prevRoundScore","roundMode","player","recordBid","recordScore","trickPlayedAction","tricksPlayed","winning","startingPlayer","useState","bids","setBids","tricks","setTricks","bonus","setBonus","trickNums","Array","keys","score","setScore","useEffect","Completed","cardsInRound","tricksWon","bonusPoints","tricksBid","Math","abs","backgroundColor","Bidding","className","style","width","key","title","map","n","type","name","id","value","onClick","bid","htmlFor","Playing","placeholder","onChange","event","Number","target","Round","players","prevRoundScores","currentRound","roundCompleteAction","winningPlayers","NotYet","setRoundMode","bidsComplete","setBidsComplete","totalTricksBid","setTotalTricksBid","allBidsIn","totalOfBids","forEach","p","undefined","scores","setScores","recordPlayerScore","tricksPlayedCount","setTricksPlayedCount","addToTrickCount","krakenPlayed","setKrakenPlayed","includes","border","Sheet","deletePlayerAction","startGameAction","setCurrentRound","setWinningPlayers","nextRound","roundScores","startingPlayerNum","setStartingPlayerNum","highestScore","prevRound","push","playerNumber","playerpos","selectStartingPlayer","length","App","previousPlayersJson","localStorage","getItem","initialPlayers","JSON","parse","setPlayers","newPlayerName","setNewPlayerName","newPlayerFieldShown","setNewPlayerFieldShown","gameStarted","setGameStarted","setItem","stringify","filter","fontSize","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.52071bb3.chunk.js","sourcesContent":["enum RoundModes {\n    NotYet = 1,\n    Bidding = 2,\n    Playing = 3,\n    Completed = 4\n}\n\nexport default RoundModes;\n","import React, { FunctionComponent, useState, useEffect } from 'react';\nimport RoundModes from './RoundModes';\n\n//import './PlayerRound.css';\n\ninterface PlayerRoundProps {\n  cardCount: number;\n  prevRoundScore: number;\n  roundMode: RoundModes;\n  player: string;\n  recordBid: (player: string, bid: number) => void;\n  recordScore: (player: string, score: number) => void;\n  trickPlayedAction: () => void;\n  tricksPlayed: number;\n  winning: boolean;\n  startingPlayer: boolean;\n}\n\nlet calculatePlayerScoreForRound = (cardsInRound: number, tricksBid: number, tricksWon: number, bonusPoints: number) => {\n  if (tricksBid === 0 && tricksWon === 0) {\n    return 10 * cardsInRound;\n  }\n  if (tricksBid !== tricksWon) {\n    return -Math.abs(tricksBid - tricksWon) * 10;\n  }\n  return tricksWon * 20 + bonusPoints;\n}\nconst PlayerRound: FunctionComponent<PlayerRoundProps> = ( {cardCount, prevRoundScore, roundMode, player,\n  recordBid, recordScore, trickPlayedAction, tricksPlayed, winning, startingPlayer } ) => {\n  let [bids, setBids] = useState(0);\n  let [tricks, setTricks] = useState(0);\n  let [bonus, setBonus] = useState(0);\n  let trickNums = [...Array(cardCount + 1).keys()];\n\n  let recordPlayerBid = (bid: number) => {\n    setBids(bid);\n    recordBid(player, bid);\n  }\n\n  let [score, setScore] = useState(0);\n  useEffect(() => {\n    if (roundMode === RoundModes.Completed) {\n      let score = calculatePlayerScoreForRound(cardCount, bids, tricks, bonus);\n      recordScore(player, score + prevRoundScore);\n      setScore(score);\n    }\n  }, [roundMode, bids, bonus, player, score, prevRoundScore, recordScore, cardCount, tricks])\n\n  let trickPlayed = () => {\n    setTricks(tricks + 1);\n    trickPlayedAction();\n  }\n\n  let bonusEntered = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setBonus(Number(event.target.value));\n  }\n  let backgroundColor =  winning ? 'rgba(255,215,0,0.6)'\n    : ((startingPlayer && roundMode === RoundModes.Bidding) ? 'rgba(25,25,200,0.6)' : '');\n  return (\n    <td className='PlayerRound' style={{width: 160, backgroundColor: backgroundColor}} key={player+cardCount}>\n    {roundMode === RoundModes.Bidding && \n    <div title={startingPlayer ? 'Starts round' : ''}>\n      {trickNums.map(n => \n      <>&nbsp;\n        <input key={player + n} type='radio' name={player} id={player+n} value={n} onClick={() => {recordPlayerBid(n)}}/>\n        <label key={player + n + 'L'} htmlFor={player + n}>{n}</label>&nbsp;<br></br>\n        </>\n      )}\n    </div>}\n    { (roundMode === RoundModes.Completed || roundMode === RoundModes.Playing) &&\n        <>\n        <span>Bid: {bids} </span>\n        <span>Won: {tricks} </span>\n        { roundMode === RoundModes.Playing && tricksPlayed < cardCount &&\n        <div><button onClick={() => {trickPlayed()}}>Add Trick</button></div>}\n        { roundMode === RoundModes.Playing && tricksPlayed === cardCount &&\n        <div>\n        <input placeholder='Bonus' type='number' style={{width: 44}} onChange={bonusEntered}/></div>}\n    </>}\n    { roundMode === RoundModes.Completed &&\n    <>\n      { bonus > 0 && <div>Bonus: {bonus}</div>}\n    <div>Score: {score}</div>\n    <div>Total: {score + prevRoundScore}</div>\n    </>\n    }\n    </td>\n  );\n}\n\nexport default PlayerRound;\n","import React, { FunctionComponent, useState, useEffect } from 'react';\nimport PlayerRound from './PlayerRound';\nimport RoundModes from './RoundModes';\nimport NumberDictionary from './NumberDictionary';\n//import './Round.css';\n\ninterface RoundProps {\n  cardCount: number;\n  players: string[];\n  prevRoundScores: NumberDictionary | null;\n  currentRound: number;\n  roundCompleteAction: (scores: NumberDictionary) => void;\n  winningPlayers: string[];\n  startingPlayer: string;\n}\n\nconst Round: FunctionComponent<RoundProps> = ( {cardCount, players, prevRoundScores,\n  currentRound, roundCompleteAction, winningPlayers, startingPlayer } ) => {\n  const [roundMode, setRoundMode] = useState(currentRound < cardCount ?\n    RoundModes.NotYet : (currentRound === cardCount ? RoundModes.Bidding : RoundModes.Completed));\n\n  let roundComplete = () => {\n    setRoundMode(RoundModes.Completed);\n    roundCompleteAction(scores);\n  }\n  let startRound = () => {\n    setRoundMode(RoundModes.Playing);\n  }\n\n  let [bids,setBids] = useState({} as NumberDictionary);\n  let [bidsComplete, setBidsComplete] = useState(false);\n  let [totalTricksBid, setTotalTricksBid] = useState(0);\n  let recordBid = (player: string, bid: number) => {\n    bids[player] = bid;\n    setBids(bids);\n    let allBidsIn = true;\n    let totalOfBids = 0;\n    players.forEach(p => {\n      if (bids[p] === undefined) {\n        allBidsIn = false;\n      } else {\n        totalOfBids += bids[p];\n      }\n    });\n    setBidsComplete(allBidsIn);\n    setTotalTricksBid(totalOfBids);\n  }\n\n  let [scores, setScores] = useState({} as NumberDictionary);\n  let recordPlayerScore = (player: string, score: number) => {\n    scores[player] = score;\n    setScores(scores);\n  };\n\n  useEffect(() => {\n    setRoundMode(currentRound < cardCount ?\n      RoundModes.NotYet : (currentRound === cardCount ? RoundModes.Bidding : RoundModes.Completed));\n  }, [cardCount, currentRound]);\n\n  let [tricksPlayedCount, setTricksPlayedCount] = useState(0);\n  let addToTrickCount = () => {\n    setTricksPlayedCount(tricksPlayedCount + 1);\n  }\n\n  let [krakenPlayed, setKrakenPlayed] = useState(false);\n  let recordKrakenPlayed = () => {\n    setKrakenPlayed(true);\n    addToTrickCount();\n  }\n\n  return (\n    <tr className=\"Round\">\n       <td key='cardCount'>{cardCount}{!bidsComplete && currentRound === cardCount && <div>Enter bids</div>}</td>\n\n       {players.map(p => \n       <PlayerRound key={p+cardCount} cardCount={cardCount} trickPlayedAction={addToTrickCount} tricksPlayed={tricksPlayedCount}\n        prevRoundScore={prevRoundScores && prevRoundScores[p] ? prevRoundScores[p] : 0}\n        roundMode={roundMode} player={p} recordBid={recordBid} recordScore={recordPlayerScore}\n        winning={winningPlayers.includes(p) && cardCount === currentRound - 1} startingPlayer={startingPlayer === p}\n        />\n       )}\n\n       <td style={{width: 50, border: 'none'}}>\n        { roundMode === RoundModes.Bidding && bidsComplete &&\n        <>\n        <button onClick={ () => {startRound()}}>Start Round</button>\n        <div style={{width: 100}}>\n        { totalTricksBid === cardCount ? 'Bids at par' :\n          (totalTricksBid < cardCount ? 'Bids ' + (cardCount - totalTricksBid) + ' under'\n          : 'Bids ' + (totalTricksBid - cardCount) + ' over')\n        }\n        </div>\n        </>\n        }\n        { roundMode === RoundModes.Playing && tricksPlayedCount < cardCount && !krakenPlayed &&\n        <button onClick={() => { recordKrakenPlayed()}}>Kraken Played</button>}\n\n        { roundMode === RoundModes.Playing && tricksPlayedCount === cardCount &&\n        <button onClick={() => { roundComplete()}}>Round done</button>}\n       </td>\n    </tr>\n  );\n}\n\nexport default Round;\n","import React, { FunctionComponent, useState, useEffect } from 'react';\nimport Round from './Round';\nimport './Sheet.css';\nimport NumberDictionary from './NumberDictionary';\n\n\ninterface SheetProps {\n  players: string[];\n  deletePlayerAction: (player: string) => void;\n  startGameAction: () => void;\n}\n\nconst Sheet: FunctionComponent<SheetProps> = ({players, deletePlayerAction, startGameAction}) => {\n  let [currentRound, setCurrentRound] = useState(1);\n  let [scores, setScores] = useState([] as NumberDictionary[]);\n  let [winningPlayers, setWinningPlayers] = useState([] as string[]);\n\n  let nextRound = (roundScores: NumberDictionary) => {\n    if (currentRound === 1) {\n      startGameAction();\n    }\n    scores[currentRound] = roundScores;\n    setScores(scores);\n    setCurrentRound(currentRound+1);\n  }\n\n  let [startingPlayerNum, setStartingPlayerNum] = useState(0);\n  const selectStartingPlayer = (p: string): void => {\n    if (currentRound === 1) {\n      let playerNumber = 0;\n      let playerpos: NumberDictionary = {};\n      players.forEach(p => {\n        playerpos[p] = playerNumber++;\n      });\n      setStartingPlayerNum(playerpos[p]);\n    }\n  };\n\n  useEffect(() => {\n    let highestScore = 0;\n    if (currentRound > 1) {\n      let prevRound = currentRound - 1;\n      for (const player in scores[prevRound]) {\n        if (scores[prevRound][player] > highestScore) {\n          winningPlayers = [player];\n          highestScore = scores[prevRound][player];\n        } else if (scores[prevRound][player] === highestScore) {\n          winningPlayers.push(player);\n        }\n      }\n      setWinningPlayers(winningPlayers);\n    }\n  }, [scores, currentRound]);\n\n  return (\n    <>\n    <table>\n      <thead>\n        <tr>\n        <th>Round</th>\n        {\n          players.map(p => \n          <th key={p} title={currentRound === 1 ?'Click here to make this the starting player':''} onClick={() => selectStartingPlayer(p)}>{p}&nbsp; \n          { currentRound === 1 && <button onClick={() => {deletePlayerAction(p)}}>\t&#10007;</button>}\n          </th>)\n        }\n        </tr>\n      </thead>\n      <tbody>\n    { [1,2,3,4,5,6,7,8,9,10].map(n =>\n         <Round key={n} cardCount={n} players={players} prevRoundScores={n > 1 ? scores[n-1] : null}\n          currentRound={currentRound} roundCompleteAction={nextRound} winningPlayers={winningPlayers}\n          startingPlayer={players[(startingPlayerNum + n-1) % players.length]}/>\n      )\n    }\n    </tbody>\n    </table>\n    </>\n  );\n}\n\nexport default Sheet;\n","import React, { useState } from 'react';\nimport './App.css';\nimport Sheet from './Sheet';\n\nfunction App() {\n  let previousPlayersJson = localStorage.getItem('players');\n  let initialPlayers = ['Player 1', 'Player 2', 'Player 3'];\n  if (previousPlayersJson) {\n    initialPlayers = JSON.parse(previousPlayersJson);\n  }\n  let [players, setPlayers] = useState(initialPlayers);\n  let [newPlayerName, setNewPlayerName] = useState('');\n  let [newPlayerFieldShown, setNewPlayerFieldShown] = useState(false);\n  let [gameStarted, setGameStarted] = useState(false);\n\n  let newPlayerNameChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setNewPlayerName(event.target.value);\n  }\n\n  let addPlayer = () => {\n    players.push(newPlayerName);\n    setPlayers(players);\n    setNewPlayerFieldShown(false);\n    localStorage.setItem('players', JSON.stringify(players));\n  }\n  let deletePlayer = (player: string) => {\n    setPlayers(players.filter(p => p !== player));\n    localStorage.setItem('players', JSON.stringify(players.filter(p => p !== player)));\n  }\n  let startGame = () => {\n    setGameStarted(true);\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-body\">\n      <h1>Ye New Skull King Scoresheet</h1>\n        { !newPlayerFieldShown && !gameStarted &&\n        <button onClick={() => {setNewPlayerFieldShown(true)}}>Add player</button>}\n        { newPlayerFieldShown && <>\n          <input type='text' placeholder='name' onChange={newPlayerNameChanged}></input>\n          <button onClick={addPlayer}>OK</button>\n          </>}\n        <Sheet players={players} deletePlayerAction={deletePlayer} startGameAction={startGame}></Sheet>\n        <br/>\n        <div style={{fontSize: 11}}>\n        © 2020 Craig Fisher <a href=\"https://twitter.com/craigfis\">@craigfis</a><br/>\n        <a href=\"https://github.com/Craigfis/SkullKingScorer\">https://github.com/Craigfis/SkullKingScorer</a>\n        <br/>\n        <a href=\"https://www.grandpabecksgames.com/products-skull-king\">What is Skull King?</a>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}