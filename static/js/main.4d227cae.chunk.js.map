{"version":3,"sources":["RoundModes.ts","PlayerRound.tsx","Round.tsx","Sheet.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["RoundModes","PlayerRound","cardCount","prevRoundScore","roundMode","player","recordBid","recordScore","trickPlayedAction","tricksPlayed","winning","useState","bids","setBids","tricks","setTricks","bonus","setBonus","trickNums","Array","keys","score","setScore","useEffect","Completed","cardsInRound","tricksWon","bonusPoints","tricksBid","Math","abs","className","style","width","backgroundColor","key","Bidding","map","n","type","name","id","value","onClick","bid","htmlFor","Playing","placeholder","onChange","event","Number","target","Round","players","prevRoundScores","currentRound","roundCompleteAction","winningPlayers","NotYet","setRoundMode","bidsComplete","setBidsComplete","totalTricksBid","setTotalTricksBid","allBidsIn","totalOfBids","forEach","p","undefined","scores","setScores","recordPlayerScore","tricksPlayedCount","setTricksPlayedCount","addToTrickCount","krakenPlayed","setKrakenPlayed","includes","border","Sheet","deletePlayerAction","startGameAction","setCurrentRound","setWinningPlayers","nextRound","roundScores","highestScore","console","log","prevRound","Object","push","App","previousPlayersJson","localStorage","getItem","initialPlayers","JSON","parse","setPlayers","newPlayerName","setNewPlayerName","newPlayerFieldShown","setNewPlayerFieldShown","gameStarted","setGameStarted","setItem","stringify","filter","fontSize","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4d227cae.chunk.js","sourcesContent":["enum RoundModes {\n    NotYet = 1,\n    Bidding = 2,\n    Playing = 3,\n    Completed = 4\n}\n\nexport default RoundModes;\n","import React, { FunctionComponent, useState, useEffect } from 'react';\nimport RoundModes from './RoundModes';\nimport { yellow, gray } from 'color-name';\n//import './PlayerRound.css';\n\ninterface PlayerRoundProps {\n  cardCount: number;\n  prevRoundScore: number;\n  roundMode: RoundModes;\n  player: string;\n  recordBid: (player: string, bid: number) => void;\n  recordScore: (player: string, score: number) => void;\n  trickPlayedAction: () => void;\n  tricksPlayed: number;\n  winning: boolean;\n}\n\nlet calculatePlayerScoreForRound = (cardsInRound: number, tricksBid: number, tricksWon: number, bonusPoints: number) => {\n  if (tricksBid === 0 && tricksWon === 0) {\n    return 10 * cardsInRound;\n  }\n  if (tricksBid !== tricksWon) {\n    return -Math.abs(tricksBid - tricksWon) * 10;\n  }\n  return tricksWon * 20 + bonusPoints;\n}\nconst PlayerRound: FunctionComponent<PlayerRoundProps> = ( {cardCount, prevRoundScore, roundMode, player,\n  recordBid, recordScore, trickPlayedAction, tricksPlayed, winning } ) => {\n  let [bids, setBids] = useState(0);\n  let [tricks, setTricks] = useState(0);\n  let [bonus, setBonus] = useState(0);\n  let trickNums = [...Array(cardCount + 1).keys()];\n\n  let recordPlayerBid = (bid: number) => {\n    setBids(bid);\n    recordBid(player, bid);\n  }\n\n  let [score, setScore] = useState(0);\n  useEffect(() => {\n    if (roundMode === RoundModes.Completed) {\n      let score = calculatePlayerScoreForRound(cardCount, bids, tricks, bonus);\n      recordScore(player, score + prevRoundScore);\n      setScore(score);\n    }\n  }, [roundMode, bids, bonus, player, score, prevRoundScore, recordScore, cardCount, tricks])\n\n  let trickPlayed = () => {\n    setTricks(tricks + 1);\n    trickPlayedAction();\n  }\n\n  let bonusEntered = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setBonus(Number(event.target.value));\n  }\n\n  return (\n    <td className='PlayerRound' style={{width: 160, backgroundColor: winning ? 'gold' : ''}} key={player+cardCount}>\n    {roundMode === RoundModes.Bidding && \n    <div>\n      {trickNums.map(n => \n      <>&nbsp;\n        <input key={player + n} type='radio' name={player} id={player+n} value={n} onClick={() => {recordPlayerBid(n)}}/>\n        <label key={player + n + 'L'} htmlFor={player + n}>{n}</label>&nbsp;<br></br>\n        </>\n      )}\n    </div>}\n    { (roundMode === RoundModes.Completed || roundMode === RoundModes.Playing) &&\n        <>\n        <span>Bid: {bids} </span>\n        <span>Won: {tricks} </span>\n        { roundMode === RoundModes.Playing && tricksPlayed < cardCount &&\n        <div><button onClick={() => {trickPlayed()}}>Add Trick</button></div>}\n        { roundMode === RoundModes.Playing && tricksPlayed === cardCount &&\n        <div>\n        <input placeholder='Bonus' type='number' style={{width: 44}} onChange={bonusEntered}/></div>}\n    </>}\n    { roundMode === RoundModes.Completed &&\n    <>\n      { bonus > 0 && <div>Bonus: {bonus}</div>}\n    <div>Score: {score}</div>\n    <div>Total: {score + prevRoundScore}</div>\n    </>\n    }\n    </td>\n  );\n}\n\nexport default PlayerRound;\n","import React, { FunctionComponent, useState, useEffect } from 'react';\nimport PlayerRound from './PlayerRound';\nimport RoundModes from './RoundModes';\nimport NumberDictionary from './NumberDictionary';\n//import './Round.css';\n\ninterface RoundProps {\n  cardCount: number;\n  players: string[];\n  prevRoundScores: NumberDictionary | null;\n  currentRound: number;\n  roundCompleteAction: (scores: NumberDictionary) => void;\n  winningPlayers: string[];\n}\n\nconst Round: FunctionComponent<RoundProps> = ( {cardCount, players, prevRoundScores,\n  currentRound, roundCompleteAction, winningPlayers } ) => {\n  const [roundMode, setRoundMode] = useState(currentRound < cardCount ?\n    RoundModes.NotYet : (currentRound === cardCount ? RoundModes.Bidding : RoundModes.Completed));\n\n  let roundComplete = () => {\n    setRoundMode(RoundModes.Completed);\n    roundCompleteAction(scores);\n  }\n  let startRound = () => {\n    setRoundMode(RoundModes.Playing);\n  }\n\n  let [bids,setBids] = useState({} as NumberDictionary);\n  let [bidsComplete, setBidsComplete] = useState(false);\n  let [totalTricksBid, setTotalTricksBid] = useState(0);\n  let recordBid = (player: string, bid: number) => {\n    bids[player] = bid;\n    setBids(bids);\n    let allBidsIn = true;\n    let totalOfBids = 0;\n    players.forEach(p => {\n      if (bids[p] === undefined) {\n        allBidsIn = false;\n      } else {\n        totalOfBids += bids[p];\n      }\n    });\n    setBidsComplete(allBidsIn);\n    setTotalTricksBid(totalOfBids);\n  }\n\n  let [scores, setScores] = useState({} as NumberDictionary);\n  let recordPlayerScore = (player: string, score: number) => {\n    scores[player] = score;\n    setScores(scores);\n  };\n\n  useEffect(() => {\n    setRoundMode(currentRound < cardCount ?\n      RoundModes.NotYet : (currentRound === cardCount ? RoundModes.Bidding : RoundModes.Completed));\n  }, [cardCount, currentRound]);\n\n  let [tricksPlayedCount, setTricksPlayedCount] = useState(0);\n  let addToTrickCount = () => {\n    setTricksPlayedCount(tricksPlayedCount + 1);\n  }\n\n  let [krakenPlayed, setKrakenPlayed] = useState(false);\n  let recordKrakenPlayed = () => {\n    setKrakenPlayed(true);\n    addToTrickCount();\n  }\n\n  return (\n    <tr className=\"Round\">\n       <td key='cardCount'>{cardCount}{!bidsComplete && currentRound === cardCount && <div>Enter bids</div>}</td>\n       {players.map(p => \n       <PlayerRound key={p+cardCount} cardCount={cardCount} trickPlayedAction={addToTrickCount} tricksPlayed={tricksPlayedCount}\n        prevRoundScore={prevRoundScores && prevRoundScores[p] ? prevRoundScores[p] : 0}\n        roundMode={roundMode} player={p} recordBid={recordBid} recordScore={recordPlayerScore}\n        winning={winningPlayers.includes(p) && cardCount === currentRound - 1}></PlayerRound>\n       )}\n       <td style={{width: 50, border: 'none'}}>\n        { roundMode === RoundModes.Bidding && bidsComplete &&\n        <>\n        <button onClick={ () => {startRound()}}>Start Round</button>\n        <div style={{width: 100}}>\n        { totalTricksBid === cardCount ? 'Bids at par' :\n          (totalTricksBid < cardCount ? 'Bids ' + (cardCount - totalTricksBid) + ' under'\n          : 'Bids ' + (totalTricksBid - cardCount) + ' over')\n        }\n        </div>\n        </>\n        }\n        { roundMode === RoundModes.Playing && tricksPlayedCount < cardCount && !krakenPlayed &&\n        <button onClick={() => { recordKrakenPlayed()}}>Kraken Played</button>}\n\n        { roundMode === RoundModes.Playing && tricksPlayedCount === cardCount &&\n        <button onClick={() => { roundComplete()}}>Round done</button>}\n       </td>\n    </tr>\n  );\n}\n\nexport default Round;\n","import React, { FunctionComponent, useState, useEffect } from 'react';\nimport Round from './Round';\nimport './Sheet.css';\nimport NumberDictionary from './NumberDictionary';\n\n\ninterface SheetProps {\n  players: string[];\n  deletePlayerAction: (player: string) => void;\n  startGameAction: () => void;\n}\n\nconst Sheet: FunctionComponent<SheetProps> = ({players, deletePlayerAction, startGameAction}) => {\n  let [currentRound, setCurrentRound] = useState(1);\n  let [scores, setScores] = useState([] as NumberDictionary[]);\n  let [winningPlayers, setWinningPlayers] = useState([] as string[]);\n\n  let nextRound = (roundScores: NumberDictionary) => {\n    if (currentRound === 1) {\n      startGameAction();\n    }\n    scores[currentRound] = roundScores;\n    setScores(scores);\n    setCurrentRound(currentRound+1);\n  }\n\n  useEffect(() => {\n    let highestScore = 0;\n    console.log(currentRound);\n    if (currentRound > 1) {\n      let prevRound = currentRound - 1;\n      console.log(Object.keys(scores[prevRound]));\n      for (const player in scores[prevRound]) {\n        console.log(player);\n        console.log(scores[prevRound][player]);\n        if (scores[prevRound][player] > highestScore) {\n          winningPlayers = [player];\n          highestScore = scores[prevRound][player];\n        } else if (scores[prevRound][player] === highestScore) {\n          winningPlayers.push(player);\n        }\n      }\n      setWinningPlayers(winningPlayers);\n      console.log(winningPlayers);\n    }\n  }, [scores, currentRound])\n  return (\n    <>\n    <table>\n      <thead>\n        <tr>\n        <th>Round</th>\n        {\n          players.map(p => \n          <th key={p}>{p}&nbsp; \n          { currentRound === 1 && <button onClick={() => {deletePlayerAction(p)}}>\t&#10007;</button>}\n          </th>)\n        }\n        </tr>\n      </thead>\n      <tbody>\n    { [1,2,3,4,5,6,7,8,9,10].map(n =>\n         <Round key={n} cardCount={n} players={players} prevRoundScores={n > 1 ? scores[n-1] : null}\n          currentRound={currentRound} roundCompleteAction={nextRound} winningPlayers={winningPlayers}/>\n      )\n    }\n    </tbody>\n    </table>\n    </>\n  );\n}\n\nexport default Sheet;\n","import React, { useState } from 'react';\nimport './App.css';\nimport Sheet from './Sheet';\n\nfunction App() {\n  let previousPlayersJson = localStorage.getItem('players');\n  let initialPlayers = ['Player 1', 'Player 2', 'Player 3'];\n  if (previousPlayersJson) {\n    initialPlayers = JSON.parse(previousPlayersJson);\n  }\n  let [players, setPlayers] = useState(initialPlayers);\n  let [newPlayerName, setNewPlayerName] = useState('');\n  let [newPlayerFieldShown, setNewPlayerFieldShown] = useState(false);\n  let [gameStarted, setGameStarted] = useState(false);\n\n  let newPlayerNameChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setNewPlayerName(event.target.value);\n  }\n\n  let addPlayer = () => {\n    players.push(newPlayerName);\n    setPlayers(players);\n    setNewPlayerFieldShown(false);\n    localStorage.setItem('players', JSON.stringify(players));\n  }\n  let deletePlayer = (player: string) => {\n    setPlayers(players.filter(p => p !== player));\n    localStorage.setItem('players', JSON.stringify(players.filter(p => p !== player)));\n  }\n  let startGame = () => {\n    setGameStarted(true);\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-body\">\n      <h1>Ye New Skull King Scoresheet</h1>\n        { !newPlayerFieldShown && !gameStarted &&\n        <button onClick={() => {setNewPlayerFieldShown(true)}}>Add player</button>}\n        { newPlayerFieldShown && <>\n          <input type='text' placeholder='name' onChange={newPlayerNameChanged}></input>\n          <button onClick={addPlayer}>OK</button>\n          </>}\n        <Sheet players={players} deletePlayerAction={deletePlayer} startGameAction={startGame}></Sheet>\n        <br/>\n        <div style={{fontSize: 11}}>\n        Copyright (c) 2020 Craig Fisher <a href=\"https://twitter.com/craigfis\">@craigfis</a><br/>\n        <a href=\"https://github.com/Craigfis/SkullKingScorer\">https://github.com/Craigfis/SkullKingScorer</a>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}